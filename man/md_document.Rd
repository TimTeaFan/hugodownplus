% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/md_document.R
\name{md_document}
\alias{md_document}
\title{An Rmd output format that produces Hugo-flavoured markdown}
\usage{
md_document(
  toc = FALSE,
  toc_depth = 3,
  fig_width = 7,
  fig_asp = 0.618,
  use_boxes = c("none", "minimal", "styled"),
  fig_retina = 2,
  tidyverse_style = TRUE,
  standalone = FALSE,
  includes = NULL,
  pandoc_args = NULL
)
}
\arguments{
\item{toc}{TRUE to include a table of contents in the output.}

\item{toc_depth}{Depth of headers to include in table of contents.}

\item{fig_width}{Figure width (in inches).}

\item{fig_asp}{Figure aspect ratio, defaults to the golden ratio.}

\item{use_boxes}{defaults to "none" which doesn't support expandable HTML boxes.

When set to "minimal" expandable boxes wrapped in fanced pandoc divs (\code{:::}) are rendered,
but all the CSS styling has to be explicitly defined by the user - either using inline code or
an external CSS file.

When set to "styled" predefined CSS styles are applied to each box type. The style can be
easily changed by overwriting custom CSS variables (see vignette: \href{../doc/customize-boxes.html}{\code{vignette("customize-boxes", package = "hugodownplus")}}).}

\item{fig_retina}{Scaling to perform for retina displays. Defaults to
\code{NULL} which performs no scaling. A setting of 2 will work for all
widely used retina displays, but will also result in the output of
\verb{<img>} tags rather than markdown images due to the need to set the
width of the image explicitly.}

\item{tidyverse_style}{Use tidyverse knitr conventions?}

\item{standalone}{Set to TRUE to include title, date and other metadata field in addition to Rmd content as a body.}

\item{includes}{Named list of additional content to include within the document (typically created using the includes function).}

\item{pandoc_args}{Additional command line options to pass to pandoc}
}
\description{
This RMarkdown output format is a drop-in replacement for \code{\link[hugodown:md_document]{hugodown::md_document()}}.
Like the later, it is designed to generate markdown that is
maximally compatible with Hugo. It intelligently generates a preview so
that you see something useful when Hugo isn't running, but it doesn't
get in the way of hugo's full-site preview when it is.
}
\details{
On top of the functionality of \code{\link[hugodown:md_document]{hugodown::md_document()}} four new arguments are available.
\code{use_boxes} allows the use of expendable html boxes. \code{standalone}, \code{includes} and \code{pandoc_args}
are adapted from \code{\link[rmarkdown:md_document]{rmarkdown::md_document()}} and allow additional content and command line options.
}
\section{Syntax highlighting}{


\code{md_document()} uses a hybrid system for syntax highlighting.
For R code it uses \href{http://github.com/r-lib/downlit}{downlit}. For
other languages, it relies on Chroma, the syntax highlighter built into
hugo.
}

\section{Reference}{

For examples of how to include expandable boxes when the \code{use_boxes} argument is set to \code{TRUE}
refer to the documentation in the \href{README.me}{README} file.
}

